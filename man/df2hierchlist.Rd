% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cols2list.R
\name{df2hierchlist}
\alias{df2hierchlist}
\title{Turn columns of a table into a hierarchical list}
\usage{
df2hierchlist(
  data,
  vars,
  listrec = list(),
  count = TRUE,
  count_sep = ":",
  missing = "UNKNOWN"
)
}
\arguments{
\item{data}{the data.frame or tibble that contains the variables}

\item{vars}{a vector of variable names}

\item{listrec}{the list object in which to return the results}

\item{count}{whether or not add the number of rows in the level names (default = TRUE)}

\item{count_sep}{which separator to use when combining counts to level names (default = ":")}

\item{missing}{how to call NA in the tree (default = "UNKNOWN")}
}
\description{
This function should not be called by the user. It is an internal function
used by \code{manyfold()}. While \code{manyfold()} turns the hierarchical structure
that exists between columns into a tree, the function \code{df2hierchlist()} turns
the hierarchical structure that exists between columns into a list.
}
\details{
Because the function implement a recursive algorithm, we pass a list as an
argument which is completed through the multiple recursive call of the
function. For the same reason, we restrict the variable names to be quoted
and confined to a vector, which helps with efficiency.
}
\examples{
## Create a toy dataset:
table <- data.frame(country = c("France", "France", "France", "France",
"Spain", "Spain"), region = c("Herault", "Herault", "Aude", "Paris",
"Catalonia", "Andalusia"), city = c("Montpellier", "Montpellier", "Narbonne",
"Paris", "Barcelona", "Sevilla"))

df2hierchlist(table, c("country", "region", "city"))


}
